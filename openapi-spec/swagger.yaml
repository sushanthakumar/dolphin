openapi: 3.0.0
info:
  version: "v1"
  title: SODA Infrastructure Management API
  description: SODA Infrastructure Management API for resource monitoring, alerting and management across multiple, heterogeneous storage backend. Currently supporting storage monitoring and alerting.
  contact:
    name: SODA Support
    url: 'https://sodafoundation.io/slack'
    email: support@sodafoundation.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Storages
paths:
  /v1/storages:
    get:
      tags:
        - Storages
      description: List all registered storage back ends
      operationId: GetStorageBackends
      parameters:
        - name: limit
          in: query
          description: Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: offset
          in: query
          description: Used in conjunction with limit to return a slice of items. offset is where to start in the list.
          required: false
          style: form
          explode: true
          schema:
            minimum: 0
            type: integer
            format: int32
        - name: sort
          in: query
          description:  Comma separated list of sort keys and optional sort directions in
            the form of key:val
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: 'sort=name:desc,id:asc'
        - name: vendor
          in: query
          description: vendor(manufacturer) of the storage.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: model
          in: query
          description: model of the storage
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: name
          in: query
          description: The storage name.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: serial_number
          in: query
          description: The storage serial number.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: status
          in: query
          description: The storage status
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - normal
              - offline
              - abnormal
      responses:
        '200':
          description: Storage backend list available.
          content:
            application/json:
              schema:
                type: object
                required:
                      - storages
                additionalProperties: true
                properties:
                  storages:
                    type: array
                    title: The storages schema
                    items:
                      $ref: '#/components/schemas/StorageBackendResponse'
        '401':
          description: NotAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '500':
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
    post:
      tags:
        - Storages
      description: Register a storage device for management.
      operationId: addStorageBackends
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageBackendRegistry'
      responses:
        '200':
          description: 'Accepted, items added to the infrastructure management'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageBackendResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '401':
          description: NotAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '409':
          description: An item already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '500':
          description: An unexpected error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
  '/v1/storages/{storage_id}':
    get:
      tags:
        - Storages
      description: Get details of a storage device
      operationId: GetStorageBackendbyID
      parameters:
        - name: storage_id
          in: path
          description: Database ID created for a storage backend .
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Storage backend list available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageBackendResponse'
        '401':
          description: NotAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '500':
          description: An unexpected error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
    delete:
      tags:
        - Storages
      description: Unregister an already registered storage backend
      parameters:
        - name: storage_id
          in: path
          description: Database ID created for a storage backend .
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '202':
          description: Accepted
        '401':
          description: NotAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '500':
          description: An unexpected error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
  /v1/storages/sync:
    post:
      tags:
        - Storages
      description: Collect all resources from all registered  backend and synchronize with DB.
      operationId: syncStorageBackends
      responses:
        '202':
          description: 'Accepted, '
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '401':
          description: NotAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '409':
          description: An item already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '500':
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
  '/v1/storages/{storage_id}/sync':
    post:
      tags:
        - Storages
      description: Collect all resources from specified storage backend and synchronize with DB
      operationId: syncStorage
      parameters:
        - name: storage_id
          in: path
          description: Database ID created for a storage backend .
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '202':
          description: 'Accepted, '
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '401':
          description: NotAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '409':
          description: An item already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '500':
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
  '/v1/storages/{storage_id}/access-info':
    get:
      tags:
        - Storages
      description: Get access info of a registered storage backend
      operationId: GettorageAccessInfobyID
      parameters:
        - name: storage_id
          in: path
          description: Database ID created for a storage backend.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Storage Access-info  available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageAccessInfoResponse'
        '401':
          description: NotAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '500':
          description: An unexpected error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
    put:
      tags:
        - Storages
      description: Update a registered storage system access information in Infrastructure management DB.
      operationId: updateStorageAccessInfobyID
      parameters:
        - name: storage_id
          in: path
          description: Database ID created for a storage backend.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageBackendRegistryUpdate'
      responses:
        '200':
          description: Storage backend  available with updated access information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageAccessInfoResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '401':
          description: NotAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '500':
          description: An unexpected error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
  /v1/storage-pools:
    get:
      tags:
        - Storage Pools
      description: List all storage pools.
      parameters:
        - name: limit
          in: query
          description: Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: offset
          in: query
          description: Used in conjunction with limit to return a slice of items. offset is where to start in the list.
          required: false
          style: form
          explode: true
          schema:
            minimum: 0
            type: integer
            format: int32
        - name: sort
          in: query
          description: >-
            Comma-separated list of sort keys and optional sort directions in
            the form of key:val
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: 'sort=name:desc,id:asc'
        - name: name
          in: query
          description: The pool name
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: id
          in: query
          description: Database ID created for a storage pool.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: native_storage_pool_id
          in: query
          description: Actual ID of the storage pool in the storage backend.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: storage_id
          in: query
          description: Database ID created for a storage backend.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: status
          in: query
          description: The pool status
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - normal
              - offline
              - abnormal
      responses:
        '200':
          description: List storage pools query was success
          content:
            application/json:
              schema:
                type: object
                required:
                  - storage_pools
                additionalProperties: true
                properties:
                  storage_pools:
                    type: array
                    title: the storage pools schema
                    items:
                      $ref: '#/components/schemas/StoragePoolSpec'
        '401':
          description: NotAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '500':
          description: An unexpected error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
  '/v1/storage-pools/{id}':
    get:
      tags:
        - Storage Pools
      description: Get storage pool detail by pool ID.
      parameters:
        - name: id
          in: path
          description: Database ID created for a storage pool.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoragePoolSpec'
        '401':
          description: NotAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '404':
          description: The resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '500':
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
  /v1/volumes:
    get:
      tags:
        - Volumes
      description: List all storage volumes.
      parameters:
        - name: limit
          in: query
          description: Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: offset
          in: query
          description: Used in conjunction with limit to return a slice of items. offset is where to start in the list.
          required: false
          style: form
          explode: true
          schema:
            minimum: 0
            type: integer
            format: int32
        - name: sort
          in: query
          description: Comma-separated list of sort keys and optional sort directions in
            the form of key:val
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: 'sort=name:desc,id:asc'
        - name: name
          in: query
          description: The volume name
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: native_storage_pool_id
          in: query
          description: Actual ID of the storage pool in the storage backend.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: native_volume_id
          in: query
          description: Actual ID created for the volume in the storage backend.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: storage_id
          in: query
          description: Database ID created for a storage backend.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: status
          in: query
          description: The volume status
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - noraml
              - offline
              - abnormal
      responses:
        '200':
          description: List volumes operation was successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - volumes
                additionalProperties: true
                properties:
                  volumes:
                    type: array
                    items:
                      $ref: '#/components/schemas/VolumeRespSpec'
        '401':
          description: NotAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '500':
          description: An unexpected error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
  '/v1/volumes/{id}':
    get:
      tags:
        - Volumes
      description: Get storage volume detail by volume ID.
      parameters:
        - name: id
          in: path
          description: Database ID created for a volume.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeRespSpec'
        '401':
          description: NotAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '404':
          description: The resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '500':
          description: An unexpected error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
  '/v1/storages/{storage_id}/alert-source':
    get:
      tags:
        - AlertSource
      description: >-
        Get details snmp alert source information configured on behalf of
        backend devices
      parameters:
        - name: storage_id
          in: path
          description: Database ID created for a storage backend.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertSourceRespSpec'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '401':
          description: NotAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '404':
          description: The resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '500':
          description: An unexpected error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
    put:
      tags:
        - AlertSource
      description: >-
        Modify snmp alert source information configured on behalf of backend
        devices
      operationId: putAlertSourceInfo
      parameters:
        - name: storage_id
          in: path
          description: Database ID created for a storage backend.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/AlertSourceUpdateSpec'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertSourceRespSpec'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '401':
          description: NotAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '404':
          description: The resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '500':
          description: An unexpected error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
    delete:
      tags:
        - AlertSource
      description: >-
        Removes snmp alert source information configured on behalf of backend
        devices
      parameters:
        - name: storage_id
          in: path
          description: Database ID created for a storage backend.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content: {}
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '401':
          description: NotAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '404':
          description: The resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '500':
          description: An unexpected error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
  '/v1/storages/{storage_id}/alerts/{sequence_number}':
    delete:
      tags:
        - Alerts
      description: Clear the alert for the input alert sequence number
      parameters:
        - name: storage_id
          in: path
          description: Database ID created for a storage backend.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: sequence_number
          in: path
          description: Sequence number which uniquely maps to the trap sent by a backend.
          required: true
          style: simple
          explode: false
          schema:
            minimum: 0
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content: {}
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '401':
          description: NotAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '404':
          description: The resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
        '500':
          description: An unexpected error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSpec'
components:
  schemas:
    BaseModel:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          example: 084bf71e-a102-11e7-88a8-e31fe6d52248
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2017-07-10T14:36:58.014Z'
        updated_at:
          type: string
          format: date-time
          readOnly: true
          example: '2017-07-10T14:36:58.014Z'
    RestAccessInfoRegistry:
      required:
        - host
        - port
        - username
        - password
      type: object
      properties:
        host:
          type: string
          example: 10.0.0.1
        port:
          type: string
          example: "8008"
        username:
          type: string
          example: admin
        password:
          type: string
    SSHAccessInfoRegistry:
      required:
        - host
        - port
        - username
        - password
        - pub_key
        - pub_key_type
      type: object
      properties:
        host:
          type: string
          example: '10.0.0.1'
        port:
          type: string
          example: '22'
        username:
          type: string
          example: admin
        password:
          type: string
        pub_key:
          type: string
          example: '73:d8:34:18:70:2a:ae:d8:1c:a5:44:40:ef:50:d0:63'
        pub_key_type:
          type: string
          enum: ['ed25519', 'ecdsa', 'rsa']
    RestAccessInfoUpdate:
      required:
        - username
        - password
      type: object
      properties:
        host:
          type: string
          example: 10.0.0.1
        port:
          type: string
          example: "8008"
        username:
          type: string
          example: admin
        password:
          type: string
    SSHAccessInfoUpdate:
      required:
        - username
        - password
      type: object
      properties:
        host:
          type: string
          example: '10.0.0.1'
        port:
          type: string
          example: '22'
        username:
          type: string
          example: admin
        password:
          type: string
        pub_key:
          type: string
          example: '73:d8:34:18:70:2a:ae:d8:1c:a5:44:40:ef:50:d0:63'
        pub_key_type:
          type: string
          enum: ['ed25519', 'ecdsa', 'rsa']
    RestAccessInfoResponse:
      required:
        - host
        - port
        - username
      type: object
      properties:
        host:
          type: string
          example: 10.0.0.1
        port:
          type: string
          example: "8008"
        username:
          type: string
          example: admin
        password:
          type: string
    SSHAccessInfoResponse:
      required:
        - host
        - port
        - username
        - pub_key
        - pub_key_type
      type: object
      properties:
        host:
          type: string
          example: '10.0.0.1'
        port:
          type: string
          example: '22'
        username:
          type: string
          example: admin
        password:
          type: string
        pub_key:
          type: string
          example: '73:d8:34:18:70:2a:ae:d8:1c:a5:44:40:ef:50:d0:63'
        pub_key_type:
          type: string
          enum: ['ed25519', 'ecdsa', 'rsa']
    StorageBackendRegistry:
      required:
        - model
        - vendor
      anyOf:
        - $ref: '#/components/schemas/RestAccessInfoRegistry'
        - $ref: '#/components/schemas/SSHAccessInfoRegistry'
      type: object
      properties:
        name:
          type: string
          example: EMC-VMAX-123456
        description:
          type: string
          example: VMAX storage lab1
        vendor:
          type: string
          example: dellemc
        model:
          type: string
          example: vmax
        rest:
          $ref: '#/components/schemas/RestAccessInfoRegistry'
        ssh:
          $ref: '#/components/schemas/SSHAccessInfoRegistry'
        extra_attributes:
          type: object
          additionalProperties:
            type: string
          example:
            array_id: 00002554321
    StorageBackendRegistryUpdate:
      anyOf:
        - $ref: '#/components/schemas/RestAccessInfoUpdate'
        - $ref: '#/components/schemas/SSHAccessInfoUpdate'
      type: object
      properties:
        rest:
          $ref: '#/components/schemas/RestAccessInfoUpdate'
        ssh:
          $ref: '#/components/schemas/SSHAccessInfoUpdate'
        extra_attributes:
          type: object
          additionalProperties:
            type: string
          example:
            controller1: string
            ip1: string
            shhKeyPath: string
    StorageBackendResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          example: EMC-VMAX-123456
        description:
          type: string
          example: VMAX storage lab1
        vendor:
          type: string
          example: Dell EMC
        model:
          type: string
          example: VMAX250F
        status:
          type: string
          example: normal
        firmware:
          type: string
          example: 5978.278
        serial_number:
          type: string
          example: '0002004355'
        location:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        sync_status:
              type: string
              enum:
                - SYNCED
                - SYNCING
        total_capacity:
          type: integer
          format: int64
        used_capacity:
          type: integer
          format: int64
        free_capacity:
          type: integer
          format: int64
    StorageAccessInfoResponse:
      type: object
      properties:
        id:
          type: string
        rest:
          $ref: '#/components/schemas/RestAccessInfoResponse'
        ssh:
          $ref: '#/components/schemas/SSHAccessInfoResponse'
        vendor:
          type: string
          example: dellemc
        model:
          type: string
          example: vmax
        extra_attributes:
          type: object
          additionalProperties:
            type: string
          example:
            array_id: string


    StoragePoolSpec:
      description: >-
        A storage pool is disocovered and updated by task manager Each pool can be
        regarded as a physical storage pool or a virtual storage pool. It is a
        logical and atomic pool and can be abstracted from any storage platform.
      allOf:
        - $ref: '#/components/schemas/BaseModel'
        - required:
            - id
            - name
          type: object
          properties:
            name:
              type: string
            id:
              type: string
              readOnly: true
              example: 084bf71e-a102-11e7-88a8-e31fe6d52248
            storage_id:
              type: string
              readOnly: true
              example: 084bf71e-a102-11e7-88a8-e31fe6d52248
            native_storage_pool_id:
              type: string
              readOnly: true
              example: SRP_1
            storage_type:
              type: string
              enum:
                - block
                - file
            description:
              type: string
            status:
              type: string
              enum:
                - normal
                - offline
                - abnormal
            total_capacity:
              type: integer
              format: int64
            used_capacity:
              type: integer
              format: int64
            free_capacity:
              type: integer
              format: int64
    VolumeRespSpec:
      description:
        Volume is an device created by storage service, it can be attached to
        physical machine or virtual machine instance.
      allOf:
        - $ref: '#/components/schemas/BaseModel'
        - type: object
          properties:
            name:
              type: string
            description:
              type: string
            status:
              type: string
              enum:
                - available
                - error
            storage_id:
              type: string
              readOnly: true
              example: 084bf71e-a102-11e7-88a8-e31fe6d52248
            total_capacity:
              type: integer
              format: int64
              example: 2
            used_capacity:
              type: integer
              format: int64
              example: 2
            free_capacity:
              type: integer
              format: int64
              example: 2
            compressed:
              type: boolean
              example: false
            deduplicated:
              type: boolean
              example: false
            type :
              type: string
              enum:
                - thick
                - thin
            native_volume_id:
              type: string
            wwn:
              type: string
            native_storage_pool_id:
              type: string
    AlertSourceUpdateSpec:
      required:
        - host
        - version
      type: object
      properties:
        version:
          type: string
          description: SNMP version. Should be mandatorily set by user
          example: SNMPV2C
          enum:
            - SNMPV2C
            - SNMPV3
        community_string:
          type: string
          description: Community string. This should be filled if version is V2C
        username:
          type: string
          description: SNMP V3 usm username. This should be filled if version is V3
        engine_id:
          type: string
          description: >-
            Engind ID of the device which will be sending the traps. This should
            be filled if version is V3
        security_level:
          type: string
          description: Security level for the user. This should be filled if version is V3
          example: noAuthnoPriv
          enum:
            - noAuthnoPriv
            - authNoPriv
            - authPriv
        auth_protocol:
          type: string
          description: >-
            Authentication protocol to be selected. This should be filled if
            authNoPriv or authPriv is set as security_level
          example: MD5
          enum:
            - MD5
            - SHA
        auth_key:
          type: string
          description: >-
            Authentication key. This should be filled if authNoPriv or authPriv
            is set
        privacy_protocol:
          type: string
          description: >-
            Privacy or encryption protocol to be selected. This should be filled
            if authPriv is set as security_level
          example: DES
          enum:
            - 3DES
            - DES
            - AES
        privacy_key:
          type: string
          description: >-
            Privacy or encryption password. This should be filled if authPriv is
            set as security_level
        host:
          type: string
          example: 10.0.0.1
      description: SNMP alert source configuration attributes.
    AlertSourceRespSpec:
      description: Response for snmp alert source configuration.
      allOf:
        - $ref: '#/components/schemas/BaseModel'
        - type: object
          properties:
            version:
              type: string
              description: SNMP version. Should be mandatorily set by user
              example: SNMPV2C
              enum:
                - SNMPV2C
                - SNMPV3
            community_string:
              type: string
              description: Community string. This should be filled ig version is V2C
            username:
              type: string
              description: SNMP V3 usm username. This should be filled ig version is V3
            engine_id:
              type: string
              description: Engind ID of the device which will be sending the traps
            security_level:
              type: string
              description: Security level for the user
              example: noAuthnoPriv
              enum:
                - noAuthnoPriv
                - authNoPriv
                - authPriv
            auth_protocol:
              type: string
              description: >-
                Authentication protocol to be selected. This should be filled if
                authNoPriv or authPriv is set as security_level
              example: MD5
              enum:
                - MD5
                - SHA
            auth_key:
              type: string
              description: >-
                Authentication key. This should be filled if authNoPriv or
                authPriv is set
            privacy_protocol:
              type: string
              description: >-
                Privacy or encryption protocol to be selected. This should be
                filled if authPriv is set as security_level
              example: DES
              enum:
                - 3DES
                - DES
                - AES
            privacy_key:
              type: string
              description: >-
                Privacy or encryption password. This should be filled if
                authPriv is set as security_level
            host:
              type: string
              example: 10.0.0.1
    ErrorSpec:
      required:
        - error_code
        - error_msg
        - error_args
      type: object
      properties:
        error_code:
          type: string
        error_msg:
          type: string
        error_args:
          type: array
          items:
            type: string
      description: >-
        Detailed HTTP error response, which consists of a HTTP status code, and
        a custom error message unique for each failure case.
  responses:
    HTTPStatus400:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorSpec'
    HTTPStatus401:
      description: NotAuthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorSpec'
    HTTPStatus403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorSpec'
    HTTPStatus404:
      description: The resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorSpec'
    HTTPStatus409:
      description: An item already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorSpec'
    HTTPStatus500:
      description: An unexpected error occured.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorSpec'
  parameters:
    storage_id:
      name: storage_id
      in: path
      description: Database ID created for a storage backend.
      required: true
      style: simple
      explode: false
      schema:
        type: string
    native_storage_pool_id:
      name: native_storage_pool_id
      in: path
      description: Actual ID of the storage pool in backend.
      required: true
      style: simple
      explode: false
      schema:
        type: string
    native_volume_id:
      name: native_volume_id
      in: path
      description: Actual ID of the volume in backend.
      required: true
      style: simple
      explode: false
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
      required: false
      style: form
      explode: true
      schema:
        minimum: 1
        type: integer
        format: int32
    offset:
      name: offset
      in: query
      description: Used in conjunction with limit to return a slice of items. offset is where to start in the list.
      required: false
      style: form
      explode: true
      schema:
        minimum: 0
        type: integer
        format: int32
          - desc
    alertSequenceNum:
      name: alertSequenceNum
      in: path
      description: Sequence number which uniquely maps to the trap sent by a backend.
      required: true
      style: simple
      explode: false
      schema:
        minimum: 0
        type: integer
        format: int32
  requestBodies:
    AlertSourceUpdateSpec:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlertSourceUpdateSpec'